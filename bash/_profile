# TODO: review this file
# base-files version 4.2-3 (copied from cygwin and modified extensively)
#
# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 
#

# $DOTFILES_DIR/bash/_profile: sourced by ~/.bash_profile in bash(1) for login shells.

# Common .bash_profile file

# if not running an interactive shell, return
[ -z "$PS1" ] && return

[ -z "$DEBUG_DOTFILES" ] || echo "Debugging dotfiles"

_PROFILE_BEING_SOURCED=yes

VERBOSE_SOURCING=${VERBOSE_SOURCING:-verbose}
#VERBOSE_SOURCING=${VERBOSE_SOURCING:-basic}
#VERBOSE_SOURCING=${VERBOSE_SOURCING:-quiet}

verbose-file-entry() { echo "->$2$(basename $1)" && shift && shift && [ $# -gt 0 ] && echo "$@"; }
verbose-file-exit()  { echo "<-$2$(basename $1)" && shift && shift && [ $# -gt 0 ] && echo "$@"; }

basic-file-entry() { echo "->$2$(basename $1)"; }
basic-file-exit()  { echo "<-$2$(basename $1)"; }

quiet-file-entry() { true; }
quiet-file-exit()  { true; }

${VERBOSE_SOURCING}-file-entry $BASH_SOURCE "bash/" "
  bash/_profile provides: a custom environment"

[ $VERBOSE_SOURCING = v* ] && {
	echo -n "function " && type verbose-file-entry | tail -n +2
	echo -n "function " && type verbose-file-exit | tail -n +2
	echo -n "function " && type basic-file-entry | tail -n +2
	echo -n "function " && type basic-file-exit | tail -n +2
	echo -n "function " && type quiet-file-entry | tail -n +2
	echo -n "function " && type quiet-file-exit | tail -n +2
}

function eecho()       { echo "$@" >&2;   }
function eprintf()     { printf "$@" >&2; }
function dbg_echo()    { [ -z $DEBUG ] || echo "$@";    } 
function dbg_printf()  { [ -z $DEBUG ] || printf "$@";  }
function dbg_eecho()   { [ -z $DEBUG ] || eecho "$@";   }
function dbg_eprintf() { [ -z $DEBUG ] || eprintf "$@"; }

[ $VERBOSE_SOURCING = v* ] && {
	echo -n "function " && type eecho | tail -n +2
	echo -n "function " && type eprintf | tail -n +2
	echo -n "function " && type dbg_echo | tail -n +2
	echo -n "function " && type dbg_printf | tail -n +2
	echo -n "function " && type dbg_eecho | tail -n +2
	echo -n "function " && type dbg_eprintf | tail -n +2
}
  
# these are quite helpful for quickly debugging exit codes like this:
# $ some_cmd && et || ef
# false
function et()  { echo true; }
function ef()  { echo false && false; }
function eet() { eecho true; }
function eef() { eecho false && false; }
function dbg_et()  { dbg_echo true; true; }
function dbg_ef()  { dbg_echo false; false; }
function dbg_eet() { dbg_eecho true; true; }
function dbg_eef() { dbg_eecho false; false; }

[ $VERBOSE_SOURCING = v* ] && {
	echo -n "function " && type et | tail -n +2
	echo -n "function " && type ef | tail -n +2
	echo -n "function " && type eet | tail -n +2
	echo -n "function " && type eef | tail -n +2
	echo -n "function " && type dbg_et | tail -n +2
	echo -n "function " && type dbg_ef | tail -n +2
	echo -n "function " && type dbg_eet | tail -n +2
	echo -n "function " && type dbg_eef | tail -n +2
}
  

# Update the OS variable
case $(uname -s) in
	Darwin)  [ "$OS" != "*OSX?"       ] && OS="$OS (OSX)"            ;;
	MINGW*)  [ "$OS" != "*Bash?"      ] && OS="$OS (MinGW/Git Bash)" ;;
	CYGWIN*) [ "$OS" != "*Cygwin?"    ] && OS="$OS (Cygwin)"         ;;
	*)       [ "$OS" != "*$(osname)?" ] && OS="$OS ($osname)"        ;;
esac
export OS
dbg_echo "Detected OS = ${OS}"

# Resolve DOTFILES_DIR (assuming ~/.dotfiles on distros without readlink and/or $BASH_SOURCE/$0)
function get_dotfiles_dir()
{
	local READLINK=$((which greadlink || which readlink) 2> /dev/null);
	local CURRENT_SCRIPT=${BASH_SOURCE};
	if [[ -z "$CURRENT_SCRIPT" && -d "$HOME/.dotfiles" ]]; then
		echo "$HOME/.dotfiles";
	elif [[ -n $CURRENT_SCRIPT && -x "$READLINK" ]]; then
		local SCRIPT_PATH=$($READLINK -f "$CURRENT_SCRIPT");
		echo $(dirname "$(dirname "$SCRIPT_PATH")");
	else
		eecho "Unable to find dotfiles, exiting.";
	fi;
}
[ $VERBOSE_SOURCING = v* ] && echo -n "function " && type get_dotfiles_dir | tail -n +2
export DOTFILES_DIR=${DOTFILES_DIR:-$(get_dotfiles_dir)}
dbg_echo "Detected DOTFILES_DIR = ${DOTFILES_DIR} ($BASH_SOURCE)";

function sed_remove_duplicate_lines() { sed -n 'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P'; }
[ $VERBOSE_SOURCING = v* ] && echo -n "function " && type sed_remove_duplicate_lines | tail -n +2

pushd "$DOTFILES_DIR/sh"     &> /dev/null && { . _onload; popd; }
pushd "$DOTFILES_DIR/system" &> /dev/null && { . _onload; popd; }
pushd "$DOTFILES_DIR/bash"   &> /dev/null && { . _onload; popd; }
pushd "$DOTFILES_DIR/git"    &> /dev/null && { . _onload; popd; }

echo "bash/_profile is finished loading, but implementation is incomplete"


${VERBOSE_SOURCING}-file-exit $BASH_SOURCE "bash/"

unset _PROFILE_BEING_SOURCED VERBOSE_SOURCING
return
#incomplete


# Load the shell dotfiles, and then some:
# any file called ~/.bash*.user can be used to extend this file locally without being checked into git
for dotfile in ~/.bash*.user; do
  . "$dotfile"
done
unset dotfile;


if [ 1 -ne 0 ]; then

# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
	complete -o default -o nospace -F _git g;
fi;

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
complete -W "NSGlobalDomain" defaults;

# Add `killall` tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;

fi # if [ 1 -ne 0 ]; then

unset _PROFILE_BEING_SOURCED

#EOF
