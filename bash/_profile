# TODO: review this file
# base-files version 4.2-3 (copied from cygwin and modified extensively)
#
# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 
#

# ~/.bash_profile: executed by bash(1) for login shells.

# User dependent .bash_profile file

# if not running an interactive shell, don't do any of this
[ -z "$PS1" ] && return

DEBUG=true

# Comment out the following to silence the statement printed each time a file is sourced
VERBOSE_SOURCING=true

# Update the OS variable
case $(uname -s) in
  Darwin)  [[ "x$OS" != *OSX?       ]] && OS="$OS (OSX)"            ;;
  MINGW*)  [[ "x$OS" != *Bash?      ]] && OS="$OS (MinGW/Git Bash)" ;;
  CYGWIN*) [[ "x$OS" != *Cygwin?    ]] && OS="$OS (Cygwin)"         ;;
  *)       [[ "x$OS" != *$(osname)? ]] && OS="$OS ($osname)"        ;;
esac
export OS


# Resolve DOTFILES_DIR (assuming ~/.dotfiles on distros without readlink and/or $BASH_SOURCE/$0)
READLINK=$((which greadlink || which readlink) 2> /dev/null)
CURRENT_SCRIPT=$BASH_SOURCE
if [[ -n $CURRENT_SCRIPT && -x "$READLINK" ]]; then
  SCRIPT_PATH=$($READLINK -f "$CURRENT_SCRIPT")
  DOTFILES_DIR=$(dirname "$(dirname "$SCRIPT_PATH")")
elif [ -d "$HOME/.dotfiles" ]; then
  DOTFILES_DIR="$HOME/.dotfiles"
else
  echo "Unable to find dotfiles, exiting."
  return # `exit 1` would quit the shell itself
fi
unset READLINK CURRENT_SCRIPT SCRIPT_PATH
export DOTFILES_DIR


# Hook for extra/custom stuff
EXTRA_DIR="$HOME/.extra"
if [ -d "$EXTRA_DIR" ]; then
  for EXTRAFILE in "$EXTRA_DIR"/bin/*.{sh,[iI],inc}; do
    src "$EXTRAFILE"
  done
  unset EXTRAFILE
fi
export EXTRA_DIR

## source the users bashrc if it exists
#src "${HOME}/.bashrc"


# source dotfiles from the system folder
for dotfile in "$DOTFILES_DIR"/system/{function,function_*,path,env,alias,completion,grep,prompt,custom}; do
  #echo "sourcing $dotfile"
  [ -r "$dotfile" ] && source "$dotfile"
done
unset dotfile

return


# source dotfiles from the bash folder
for dotfile in "$DOTFILES_DIR"/bash/{functions*,aliases*,path,env,*}; do
  if [ "x$dotfile" != "x_profile*" ]; then #TODO: change this to a case cuz this won't work as is
    src "$dotfile"
  fi
done
unset dotfile

# Load the shell dotfiles, and then some:
# any file called ~/.bash*.user can be used to extend this file locally without being checked into git
for dotfile in ~/.bash*.user; do
  src "$dotfile"
done
unset dotfile;


if [ 0 -ne 0 ]; then

# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
	complete -o default -o nospace -F _git g;
fi;

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
complete -W "NSGlobalDomain" defaults;

# Add `killall` tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;

fi # if [ 0 -ne 0 ]; then

#EOF
