# TODO: review this file
# base-files version 4.2-3 (copied from cygwin and modified extensively)
#
# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 
#

# ~/.bash_profile: executed by bash(1) for login shells.

# User dependent .bash_profile file

# if not running an interactive shell, don't do any of this
[ -z "$PS1" ] && return


# set an OS variable to `uname -s`
OS=$(uname -s)
if [ "$OS" = "Darwin" ]; then
    OS="OSX"
fi
export OS


# Resolve DOTFILES_DIR (assuming ~/.dotfiles on distros without readlink and/or $BASH_SOURCE/$0)
READLINK=$((which greadlink || which readlink) 2> /dev/null)
CURRENT_SCRIPT=$BASH_SOURCE
if [[ -n $CURRENT_SCRIPT && -x "$READLINK" ]]; then
    SCRIPT_PATH=$($READLINK -f "$CURRENT_SCRIPT")
    DOTFILES_DIR=$(dirname "$SCRIPT_PATH")
elif [ -d "$HOME/.dotfiles" ]; then
    DOTFILES_DIR="$HOME/.dotfiles"
else
    echo "Unable to find dotfiles, exiting."
    return # `exit 1` would quit the shell itself
fi
unset READLINK CURRENT_SCRIPT SCRIPT_PATH
export DOTFILES_DIR


# Set LSCOLORS
eval "$(dircolors "$DOTFILES_DIR"/system/.dir_colors)"

# helper function for including a source file if it exists
src(){
	[ -f "$*" ] && echo "Sourcing \"$*\"" && source "$*" && echo "Sourced \"$*\"" || echo "Failed to source: \"$*\""
}


# Hook for extra/custom stuff
EXTRA_DIR="$HOME/.extra"
if [ -d "$EXTRA_DIR" ]; then
    for EXTRAFILE in "$EXTRA_DIR"/bin/*.sh; do
		src "$EXTRAFILE"
    done
	unset EXTRAFILE
fi
export EXTRA_DIR


# source the users bashrc if it exists
if [ -f "${HOME}/.bashrc" ] ; then
  echo "Sourcing ${HOME}/.bashrc" && source "${HOME}/.bashrc"
fi

for dotfile in "$DOTFILES_DIR"/system/.{function,function_*,path,env,alias,completion,grep,prompt,nvm,rvm,custom}; do
    [ -f "$dotfile" ] && . "$dotfile"
done
unset dotfile

# Load the shell dotfiles, and then some:
# any file called ~/.bash*.user can be used to extend this file locally without being checked into git
for file in ~/.bash.{path,prompt,exports,aliases,functions} ~/.bash{.path,.prompt,.exports,.aliases,.functions,*}.user; do
	[ -r "$file" ] && [ -f "$file" ] && echo "Sourcing $file" && source "$file";
done;
unset file;


if [ 0 -ne 0 ]; then

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# Append to the Bash history file, rather than overwriting it
shopt -s histappend;

# Autocorrect typos in path names when using `cd`
shopt -s cdspell;

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
	shopt -s "$option" 2> /dev/null;
done;
unset option

## Add tab completion for many Bash commands
#if which brew > /dev/null && [ -f "$(brew --prefix)/share/bash-completion/bash_completion" ]; then
#	source "$(brew --prefix)/share/bash-completion/bash_completion";
#elif [ -f /etc/bash_completion ]; then
#	source /etc/bash_completion;
#fi;

# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
	complete -o default -o nospace -F _git g;
fi;

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
complete -W "NSGlobalDomain" defaults;

# Add `killall` tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;

fi # if [ 0 -ne 0 ]; then

#EOF
